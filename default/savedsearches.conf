[Average, Median, and 90th Percentile]
action.email.reportServerEnabled = 0
action.email.useNSSubject = 1
alert.digest_mode = True
alert.suppress = 0
alert.track = 0
auto_summarize.dispatch.earliest_time = -1d@h
dispatch.earliest_time = 0
display.general.type = statistics
display.page.search.tab = statistics
display.visualizations.charting.chart = line
display.visualizations.charting.chart.nullValueMode = connect
display.visualizations.show = 0
request.ui_dispatch_app = akamai_cdn
request.ui_dispatch_view = search
search = index=foo lastmileRTT|timechart span=15m avg("netPerf.lastMileRTT"), median("netPerf.lastMileRTT"), perc90("netPerf.lastMileRTT") | rename avg("netPerf.lastMileRTT") as Average, median("netPerf.lastMileRTT") as Median, perc90("netPerf.lastMileRTT") as "90th Percentile" | sort by _time

[Bytes and Cookies per Edge IP]
action.email.reportServerEnabled = 0
action.email.useNSSubject = 1
alert.digest_mode = True
alert.suppress = 0
alert.track = 0
auto_summarize.dispatch.earliest_time = -1d@h
dispatch.earliest_time = 0
display.general.type = statistics
display.page.search.tab = statistics
display.visualizations.charting.chart = line
display.visualizations.show = 0
request.ui_dispatch_app = akamai_cdn
request.ui_dispatch_view = search
search = index=foo | multikv noheader=True | stats dc(reqHdr.cookie), sum(message.bytes), values(geo.country) by netPerf.edgeIP  | sort -dc(reqHdr.cookie) | rename netPerf.edgeIP as "Edge IP", dc(reqHdr.cookie) as "Cookie Count", sum(message.bytes) as "Sum of Messages in Bytes", values(geo.country) as Country

[DDOS Watch]
action.email.reportServerEnabled = 0
action.email.useNSSubject = 1
alert.digest_mode = True
alert.suppress = 0
alert.track = 0
auto_summarize.dispatch.earliest_time = -1d@h
dispatch.earliest_time = 0
display.general.type = visualizations
display.page.search.tab = visualizations
display.visualizations.charting.chart = line
display.visualizations.show = 0
request.ui_dispatch_app = akamai_cdn
request.ui_dispatch_view = search
search = index=foo | timechart span=1m count(host) by host

[IP Location of Get Requests by Session]
action.email.reportServerEnabled = 0
action.email.useNSSubject = 1
alert.digest_mode = True
alert.suppress = 0
alert.track = 0
auto_summarize.dispatch.earliest_time = -1d@h
dispatch.earliest_time = 0
display.general.type = statistics
display.page.search.tab = statistics
display.visualizations.charting.chart = bar
display.visualizations.show = 0
request.ui_dispatch_app = akamai_cdn
request.ui_dispatch_view = search
search = index=foo\
| iplocation message.cliIP \
|dedup session_cookie\
| table session_cookie, message.UA, message.reqMethod, lat, lon \
| where !(message.reqMethod = "HEAD")\
| where !(message.UA = "*Akamai_Site_Analyzer*")\
| where !(message.UA = "*Gomez*")\
| where !(message.UA = "*googlebot*")\
| where !(message.UA = "*RealRacing*")

[Requested Paths]
action.email.reportServerEnabled = 0
action.email.useNSSubject = 1
alert.digest_mode = True
alert.suppress = 0
alert.track = 0
auto_summarize.dispatch.earliest_time = -1d@h
dispatch.earliest_time = 0
display.general.type = statistics
display.page.search.tab = statistics
display.visualizations.charting.chart = bar
display.visualizations.show = 0
request.ui_dispatch_app = akamai_cdn
request.ui_dispatch_view = search
search = index=foo (message.reqPath!="*.jpg")(message.reqPath!="*.js")(message.reqPath!="*.css") (message.reqPath!="*.png")(message.reqPath!="*.xml") (message.reqPath!="*.cgi") (message.reqPath!="*.ico") (message.reqPath!="*.gif") (message.reqPath!="*.csv")(message.reqPath!="*.swf") (message.reqPath!="*.tiff") (message.reqPath!="*.tif")    | eval reqpath=urldecode('message.reqPath')  | top 50 reqpath | sort by -count | rename reqpath as "Request Path", count as "Number of Requests", percent as "Percentage"

[Requests by Response Time]
action.email.reportServerEnabled = 0
action.email.useNSSubject = 1
alert.digest_mode = True
alert.suppress = 0
alert.track = 0
auto_summarize.dispatch.earliest_time = -1d@h
dispatch.earliest_time = 0
display.general.type = statistics
display.page.search.tab = statistics
display.visualizations.charting.chart = bar
display.visualizations.show = 0
display.visualizations.type = mapping
request.ui_dispatch_app = akamai_cdn
request.ui_dispatch_view = search
search = index=foo | where 'netPerf.cacheStatus'=1 OR 'netPerf.cacheStatus'= 2 | eval floorx=('netPerf.downloadTime'/100) | eval floorxx=floorx*100 | eval Response_Time = if (floorxx >= "2000","2001",floorxx) | stats count AS Requests by Response_Time | sort by Response_Time
